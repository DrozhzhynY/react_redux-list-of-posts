{"version":3,"sources":["components/Loading/Loading.tsx","components/User/User.tsx","helpers/capitalize.ts","store/posts.ts","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","store/loading.ts","store/message.ts","store/loadedCompleted.ts","store/search.ts","helpers/api.ts","store/index.ts","App.tsx","index.tsx"],"names":["Loading","isLoaded","errorMessage","className","User","name","email","address","href","city","street","zipcode","capitalize","str","toUpperCase","slice","reducer","posts","action","type","filter","post","id","postId","map","comments","comment","commentId","Comment","body","dispatch","useDispatch","onClick","removeComment","CommentList","key","Post","title","user","PostList","loading","message","query","API_URL","getData","url","a","fetch","response","json","getPreparedPosts","Promise","all","users","preparedPosts","find","userId","rootReducer","combineReducers","loadingReducer","loaded","isLoadReducer","messageReducer","queryReducer","getLoading","state","getMessage","getPosts","getLoaded","getQuery","getVisiblePosts","toLowerCase","includes","loadPosts","then","postsFromServer","catch","setMessage","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","isLoading","useSelector","visiblePosts","useState","visibleQuery","setVisibleQuery","setVisibleQueryWithDebounce","useCallback","debounce","actualQuery","setQuery","length","htmlFor","value","onChange","e","target","Root","ReactDOM","render","document","getElementById"],"mappings":"iWAoBeA,EAbkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,aAAb,OAC/B,yBAAKC,UAAYF,GAA6B,KAAjBC,EAAuB,GAAK,cACvD,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,gCCiBWE,G,MAxBe,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,QAAhB,OAC5B,oCACE,yBAAKJ,UAAU,QACb,2BACG,IACD,0BAAMA,UAAU,cAAhB,YACCE,GAEH,uBAAGG,KAAK,2BAA2BL,UAAU,eAAeG,GAC5D,uBAAGH,UAAU,iBACX,8BACGI,EAAQE,KADX,KAIA,8BACGF,EAAQG,OADX,KAIA,8BAAOH,EAAQI,cC3BVC,EAAa,SAACC,GAAD,OACxBA,EAAI,GAAGC,cAAgBD,EAAIE,MAAM,I,OCmDpBC,EAxBC,WAAoD,IAAnDC,EAAkD,uDAA1B,GAAIC,EAAsB,uCACjE,OAAQA,EAAOC,MACb,IA5Bc,YA6BZ,OAAOD,EAAOD,MAChB,IA7BgB,cA8Bd,OAAOA,EAAMG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,EAAOK,UACjD,IA9BmB,iBA+BjB,OAAON,EAAMO,KAAI,SAAAH,GACf,OAAIA,EAAKC,KAAOJ,EAAOK,OACd,2BACFF,GADL,IAEEI,SAAUJ,EAAKI,SACZL,QAAO,SAACM,GAAD,OAAsBA,EAAQJ,KAAOJ,EAAOS,eAInDN,KAGX,QACE,OAAOJ,ICbEW,G,MAzBkB,SAAC,GAAiB,IAAfF,EAAc,EAAdA,QAEhCJ,EACEI,EADFJ,GAAIjB,EACFqB,EADErB,KAAMC,EACRoB,EADQpB,MAAOuB,EACfH,EADeG,KAAMN,EACrBG,EADqBH,OAEnBO,EAAWC,cAEjB,OACE,yBAAK5B,UAAU,WACb,uBAAGA,UAAU,iBACVS,EAAWP,GACZ,uBAAGG,KAAK,2BAA2BL,UAAU,kBAAkBG,IAEjE,2BACGM,EAAWiB,IAEd,4BACEV,KAAK,SACLa,QAAS,kBAAMF,EDPM,SAACP,EAAgBI,GAAjB,MAC3B,CACER,KAlBmB,iBAmBnBI,SACAI,aCG4BM,CAAcV,EAAQD,MAFhD,aCNSY,EAZsB,SAAC,GAAD,IAAGT,EAAH,EAAGA,SAAH,OACnC,yBAAKtB,UAAU,YACb,wCACCsB,EAASD,KAAI,SAAAE,GAAO,OACnB,kBAAC,EAAD,CACEA,QAASA,EACTS,IAAKT,EAAQJ,UC+BNc,G,MA5Be,SAAC,GAExB,IADLC,EACI,EADJA,MAAOR,EACH,EADGA,KAAMS,EACT,EADSA,KAAMb,EACf,EADeA,SAAUH,EACzB,EADyBA,GAEvBQ,EAAWC,cAEjB,OACE,6BAAS5B,UAAU,QAEjB,wBAAIA,UAAU,eACXS,EAAWyB,IAEd,kBAAC,EAASC,GAEV,6BAASnC,UAAU,cAChBS,EAAWiB,IAEd,4BACEV,KAAK,SACLa,QAAS,kBAAMF,EHpBrB,CACEX,KAZgB,cAahBI,OGkBuCD,MAFrC,UAMA,kBAAC,EAAD,CAAaG,SAAUA,OCvBdc,EARmB,SAAC,GAAD,IAAGtB,EAAH,EAAGA,MAAH,OAChC,yBAAKd,UAAU,aACZc,EAAMO,KAAI,SAACH,GAAD,OACT,kBAAC,EAAD,iBAAUA,EAAV,CAAgBc,IAAKd,EAAKC,W,uBCWjBN,EAbC,WAAyC,IAAxCwB,EAAuC,wDAAtBtB,EAAsB,uCACtD,OAAQA,EAAOC,MACb,IARkB,gBAShB,OAAO,EAET,IAVmB,iBAWjB,OAAO,EAET,QACE,OAAOqB,ICDExB,EAVC,WAAsC,IAArCyB,EAAoC,uDAA1B,GAAIvB,EAAsB,uCACnD,OAAQA,EAAOC,MACb,IANgB,cAOd,OAAOD,EAAOuB,QAEhB,QACE,OAAOA,ICIEzB,EAVC,WAA0C,IAAzCf,EAAwC,wDAAtBiB,EAAsB,uCACvD,OAAQA,EAAOC,MACb,IANmB,iBAOjB,OAAO,EAET,QACE,OAAOlB,ICSEe,EAVC,WAAoC,IAAnC0B,EAAkC,uDAA1B,GAAIxB,EAAsB,uCACjD,OAAQA,EAAOC,MACb,IAXU,QAYR,OAAOD,EAAOwB,MAEhB,QACE,OAAOA,I,wBCjBPC,EAAU,iE,SAEDC,E,8EAAf,WAAuBC,GAAvB,iBAAAC,EAAA,sEACyBC,MAAMF,GAD/B,cACQG,EADR,gBAEqBA,EAASC,OAF9B,cAEQA,EAFR,yBAISA,GAJT,4C,sBAOO,IAAMC,EAAgB,uCAAG,sCAAAJ,EAAA,sEACSK,QAAQC,IAAI,CACjDR,EAAQ,GAAD,OAAID,EAAJ,gBACPC,EAAQ,GAAD,OAAID,EAAJ,gBACPC,EAAQ,GAAD,OAAID,EAAJ,qBAJqB,0CACvB1B,EADuB,KAChBoC,EADgB,KACT5B,EADS,KAOxB6B,EAAgBrC,EAAMO,KAAI,SAACH,GAAD,mBAAC,eAC5BA,GAD2B,IAE9BiB,KAAMe,EAAME,MAAK,SAACjB,GAAD,OAAgBA,EAAKhB,KAAOD,EAAKmC,UAClD/B,SAAUA,EAASL,QAAO,SAACM,GAAD,OAAsBA,EAAQH,SAAWF,EAAKC,WAV5C,kBAavBgC,GAbuB,2CAAH,qDCKvBG,EAAcC,0BAAgB,CAClClB,QAASmB,EACTC,OAAQC,EACRpB,QAASqB,EACT7C,QACAyB,MAAOqB,IAKIC,EAAa,SAACC,GAAD,OAAsBA,EAAMzB,SACzC0B,EAAa,SAACD,GAAD,OAAsBA,EAAMxB,SACzC0B,EAAW,SAACF,GAAD,OAAsBA,EAAMhD,OACvCmD,EAAY,SAACH,GAAD,OAAsBA,EAAML,QACxCS,EAAW,SAACJ,GAAD,OAAsBA,EAAMvB,OAEvC4B,EAAkB,SAACL,GAC9B,OAAOA,EAAMhD,MACVG,QAAO,SAACC,GAAD,OACLA,EAAKgB,MAAQhB,EAAKQ,MAChB0C,cACAC,SAASP,EAAMvB,MAAM6B,mBAIjBE,EAAY,WACvB,OAAO,SAAC3C,GACNA,ELpC+B,CAAEX,KAHf,kBKwClB+B,IACGwB,MAAK,SAAAC,GACJ7C,ELtC4B,CAAEX,KAHf,mBK0CfW,EVtCN,CACEX,KANc,YAOdF,MUoCsB0D,IAClB7C,EH1C0B,CAAEX,KAFb,sBG8ChByD,OAAM,WACL9C,EJ7CkB,SAACW,GAAD,MAAsB,CAAEtB,KAF9B,cAEiDsB,WI6CpDoC,CAAW,eAUbC,EALDC,sBACZtB,EACAuB,8BAAoBC,0BAAgBC,OCsCvBC,EAhFH,WACV,IAAMrD,EAAWC,cACXqD,EAAYC,YAAYrB,GACxB9D,EAAemF,YAAYnB,GAC3BjD,EAAQoE,YAAYlB,GACpBlE,EAAWoF,YAAYjB,GACvB1B,EAAQ2C,YAAYhB,GACpBiB,EAAeD,YAAYf,GAPjB,EAQwBiB,mBAAS7C,GARjC,mBAQT8C,EARS,KAQKC,EARL,KAUVC,EAA8BC,sBAClCC,KAAS,SAACC,GAAD,OAAyB/D,EHrBd,SAACY,GAAD,MACtB,CACEvB,KAJU,QAKVuB,SGkB2CoD,CAASD,MAAe,KAAM,IAU3E,OACE,oCACE,yBAAK1F,UAAU,OACb,sDAEGiF,GAA8B,IAAjBnE,EAAM8E,QACpB,4BACE5E,KAAK,SACLhB,UAAU,kBACV6B,QAAS,kBAAMF,EAAS2C,OAH1B,QASDW,GACC,kBAAC,EAAD,CACEnF,SAAUA,EACVC,aAAcA,IAIjBD,GACC,oCACE,2BACE+F,QAAQ,cACR7F,UAAU,SAEV,2BACEgB,KAAK,OACLG,GAAG,cACHnB,UAAU,cACV8F,MAAOT,EACPU,SAxCS,SAACC,GAA0C,IACxDF,EAAUE,EAAEC,OAAZH,MAERR,EAAgBQ,GAChBP,EAA4BO,OAuCpB,kBAAC,EAAD,CAAUhF,MAAOqE,KAGpBpF,GAEG,yBAAKC,UAAU,YACb,uBAAGA,UAAU,kBACVD,GAEH,4BACEiB,KAAK,SACLhB,UAAU,kBACV6B,QAAS,kBAAMF,EAAS2C,OAH1B,YCxER4B,EAAO,kBACX,kBAAC,IAAD,CAAUvB,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKNwB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.ad6ffa9d.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  isLoaded: boolean;\n  errorMessage: string;\n};\n\nconst Loading: React.FC<Props> = ({ isLoaded, errorMessage }) => (\n  <div className={(isLoaded || errorMessage !== '') ? '' : 'lds-roller'}>\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport './User.scss';\n\ntype Props = {\n  name: string;\n  email: string;\n  address: Address;\n};\n\nconst User: React.FC<Props> = ({ name, email, address }) => (\n  <>\n    <div className=\"User\">\n      <p>\n        {' '}\n        <span className=\"User__Name\">Author: </span>\n        {name}\n      </p>\n      <a href=\"mailto:example@gmail.com\" className=\"User__Email\">{email}</a>\n      <p className=\"User__Address\">\n        <span>\n          {address.city}\n          ,\n        </span>\n        <span>\n          {address.street}\n          ,\n        </span>\n        <span>{address.zipcode}</span>\n      </p>\n    </div>\n  </>\n);\n\nexport default User;\n","export const capitalize = (str: string) => (\n  str[0].toUpperCase() + str.slice(1)\n);\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst REMOVE_POST = 'REMOVE_POST';\nconst REMOVE_COMMENT = 'REMOVE_COMMENT';\n\nexport const setPosts = (posts: Post[]) => (\n  {\n    type: SET_POSTS,\n    posts,\n  }\n);\n\nexport const removePost = (postId: number) => (\n  {\n    type: REMOVE_POST,\n    postId,\n  }\n);\n\nexport const removeComment = (postId: number, commentId: number) => (\n  {\n    type: REMOVE_COMMENT,\n    postId,\n    commentId,\n  }\n);\n\nconst reducer = (posts: PreparedPost[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case REMOVE_POST:\n      return posts.filter(post => post.id !== action.postId);\n    case REMOVE_COMMENT:\n      return posts.map(post => {\n        if (post.id === action.postId) {\n          return {\n            ...post,\n            comments: post.comments\n              .filter((comment: Comment) => comment.id !== action.commentId),\n          };\n        }\n\n        return post;\n      });\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { capitalize } from '../../helpers/capitalize';\nimport { removeComment } from '../../store/posts';\nimport './Comment.scss';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst Comment: React.FC<Props> = ({ comment }) => {\n  const {\n    id, name, email, body, postId,\n  } = comment;\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"Comment\">\n      <p className=\"Comment__Name\">\n        {capitalize(name)}\n        <a href=\"mailto:example@gmail.com\" className=\"Comment__Email\">{email}</a>\n      </p>\n      <p>\n        {capitalize(body)}\n      </p>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(removeComment(postId, id))}\n      >\n        Delete\n      </button>\n    </div>\n  );\n};\n\nexport default Comment;\n","import React from 'react';\nimport Comment from '../Comment/Comment';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentList: React.FC<Props> = ({ comments }) => (\n  <div className=\"comments\">\n    <h2>Comments</h2>\n    {comments.map(comment => (\n      <Comment\n        comment={comment}\n        key={comment.id}\n      />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport User from '../User/User';\nimport CommentList from '../CommentList/CommentList';\nimport { capitalize } from '../../helpers/capitalize';\nimport { removePost } from '../../store/posts';\nimport './Post.scss';\n\ntype Props = {\n  id: number;\n  title: string;\n  body: string;\n  user: User;\n  comments: Comment[];\n};\n\nconst Post: React.FC<Props> = ({\n  title, body, user, comments, id,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <section className=\"Post\">\n\n      <h2 className=\"Post__Title\">\n        {capitalize(title)}\n      </h2>\n      <User {...user} />\n\n      <article className=\"Post__Text\">\n        {capitalize(body)}\n      </article>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(removePost(id))}\n      >\n        Delete\n      </button>\n      <CommentList comments={comments} />\n    </section>\n  );\n};\n\n\nexport default Post;\n","import React from 'react';\nimport Post from '../Post/Post';\n\ntype Props = {\n  posts: PreparedPost[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => (\n  <div className=\"container\">\n    {posts.map((post: PreparedPost) => (\n      <Post {...post} key={post.id} />\n    ))}\n  </div>\n);\n\nexport default PostList;\n","import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_MESSAGE = 'SET_MESSAGE';\n\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst LOAD_COMPLETED = 'LOAD_COMPLETED';\n\nexport const setIsLoaded = () => ({ type: LOAD_COMPLETED });\n\nconst reducer = (isLoaded = false, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_COMPLETED:\n      return true;\n\n    default:\n      return isLoaded;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst QUERY = 'QUERY';\n\nexport const setQuery = (query: string) => (\n  {\n    type: QUERY,\n    query,\n  }\n);\n\nconst reducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case QUERY:\n      return action.query;\n\n    default:\n      return query;\n  }\n};\n\nexport default reducer;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nasync function getData(url: string) {\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json;\n}\n\nexport const getPreparedPosts = async (): Promise<PreparedPost[]> => {\n  const [posts, users, comments] = await Promise.all([\n    getData(`${API_URL}/posts.json`),\n    getData(`${API_URL}/users.json`),\n    getData(`${API_URL}/comments.json`),\n  ]);\n\n  const preparedPosts = posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n\n  return preparedPosts;\n};\n","import {\n  createStore, combineReducers, applyMiddleware, AnyAction,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport isLoadReducer, { setIsLoaded } from './loadedCompleted';\nimport posts, { setPosts } from './posts';\nimport queryReducer from './search';\nimport { getPreparedPosts } from '../helpers/api';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  loaded: isLoadReducer,\n  message: messageReducer,\n  posts,\n  query: queryReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getLoaded = (state: RootState) => state.loaded;\nexport const getQuery = (state: RootState) => state.query;\n\nexport const getVisiblePosts = (state: RootState) => {\n  return state.posts\n    .filter((post: PreparedPost) => (\n      (post.title + post.body)\n        .toLowerCase()\n        .includes(state.query.toLowerCase())\n    ));\n};\n\nexport const loadPosts = () => {\n  return (dispatch: Dispatch<AnyAction>) => {\n    dispatch(startLoading());\n    getPreparedPosts()\n      .then(postsFromServer => {\n        dispatch(finishLoading());\n        dispatch(setPosts(postsFromServer));\n        dispatch(setIsLoaded());\n      })\n      .catch(() => {\n        dispatch(setMessage('Sorry'));\n      });\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { useState, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport debounce from 'lodash.debounce';\nimport Loading from './components/Loading/Loading';\nimport PostList from './components/PostList/PostList';\nimport {\n  loadPosts, getLoaded, getVisiblePosts,\n  getLoading, getMessage, getPosts, getQuery,\n} from './store/index';\n\nimport { setQuery } from './store/search';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading);\n  const errorMessage = useSelector(getMessage);\n  const posts = useSelector(getPosts);\n  const isLoaded = useSelector(getLoaded);\n  const query = useSelector(getQuery);\n  const visiblePosts = useSelector(getVisiblePosts);\n  const [visibleQuery, setVisibleQuery] = useState(query);\n\n  const setVisibleQueryWithDebounce = useCallback(\n    debounce((actualQuery: string) => dispatch(setQuery(actualQuery)), 500), [],\n  );\n\n  const handleOnChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n\n    setVisibleQuery(value);\n    setVisibleQueryWithDebounce(value);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <h1>Dynamic list of posts</h1>\n\n        {(!isLoading && posts.length === 0) && (\n          <button\n            type=\"button\"\n            className=\"App__LoadButton\"\n            onClick={() => dispatch(loadPosts())}\n          >\n            Load\n          </button>\n        )}\n\n        {isLoading && (\n          <Loading\n            isLoaded={isLoaded}\n            errorMessage={errorMessage}\n          />\n        )}\n\n        {isLoaded && (\n          <>\n            <label\n              htmlFor=\"inputFilter\"\n              className=\"Label\"\n            >\n              <input\n                type=\"text\"\n                id=\"inputFilter\"\n                className=\"InputFilter\"\n                value={visibleQuery}\n                onChange={handleOnChange}\n              />\n            </label>\n            <PostList posts={visiblePosts} />\n          </>\n        )}\n        {errorMessage\n          && (\n            <div className=\"is-error\">\n              <p className=\"is-error__text\">\n                {errorMessage}\n              </p>\n              <button\n                type=\"button\"\n                className=\"App__LoadButton\"\n                onClick={() => dispatch(loadPosts())}\n              >\n                Load\n              </button>\n            </div>\n          )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}